/*
 *   SakaiScript.jws - updated for Sakai 2.5
 *
 */
 
import java.util.Date;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import java.util.Set;
import java.util.Collection;
import org.sakaiproject.tool.api.Session;
import org.sakaiproject.tool.cover.SessionManager;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import org.sakaiproject.authz.api.AuthzGroup;
import org.sakaiproject.authz.api.Role;
import org.sakaiproject.user.cover.UserDirectoryService;
import org.sakaiproject.tool.api.Tool;
import org.sakaiproject.site.api.ToolConfiguration;
import org.sakaiproject.site.api.Site;
import org.sakaiproject.site.api.SitePage;
import org.sakaiproject.user.api.UserEdit;
import org.sakaiproject.authz.cover.AuthzGroupService;
import org.sakaiproject.user.api.User;
import org.sakaiproject.tool.cover.ToolManager;
import org.sakaiproject.site.cover.SiteService;
import org.sakaiproject.authz.cover.SecurityService;
import org.sakaiproject.site.api.SiteService.SelectionType;
import org.sakaiproject.site.api.SiteService.SortType;

import java.util.Properties;
import org.apache.axis.AxisFault;

import org.sakaiproject.util.Xml;
import org.w3c.dom.Document;
import org.w3c.dom.Node;

public class SakaiScript {
	
	private static final Log LOG = LogFactory.getLog(SakaiScript.class);
	
private Session establishSession(String id) throws AxisFault 
{
	Session s = SessionManager.getSession(id);
	
	if (s == null)
	{
		throw new AxisFault("Session "+id+" is not active");
	}
	s.setActive();
	SessionManager.setCurrentSession(s);
	return s;
}

public String checkSession(String id) {
	Session s = SessionManager.getSession(id);
	if (s == null)
	{
		return "null";
	}
	else
	{
		return id;
	}
}

/**
 * Create a new user account
 *
 * @param	sessionid		the id of a valid session
 * @param	eid				the login username (ie jsmith26) of the new user
 * @param	firstname		the new user's first name
 * @param	lastname		the new user's last name
 * @param	email			the new user's email address
 * @param	type			the type of account (ie registered, guest etc). Should either match one of the !user.template.XXX realms (where XXX is the type) or be blank to inherit the !user.template permission
 * @param	password		the password for the new user
 * @return		        	success or exception message
 * @throws	AxisFault
 *
 * This is the preferred method of adding user accounts whereby their internal ID is automatically assigned a UUID.
 *
 */
public String addNewUser( String sessionid, String eid, String firstname, String lastname, String email, String type, String password) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	if (!SecurityService.isSuperUser())
	{
		LOG.warn("NonSuperUser trying to add accounts: " + session.getUserId());
        throw new AxisFault("NonSuperUser trying to add accounts: " + session.getUserId());
	}
	try {

		User addeduser = null;
		addeduser = UserDirectoryService.addUser(null, eid, firstname, lastname, email, password, type, null);
	
	}
	catch (Exception e) {  
		LOG.warn("WS addNewUser(): " + e.getClass().getName() + " : " + e.getMessage());
        return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Create a new user account
 *
 * @param	sessionid		the id of a valid session
 * @param	id				the id of the new user that will be used internally by Sakai
 * @param	eid				the login username (ie jsmith26) of the new user
 * @param	firstname		the new user's first name
 * @param	lastname		the new user's last name
 * @param	email			the new user's email address
 * @param	type			the type of account (ie registered, guest etc). Should either match one of the !user.template.XXX realms (where XXX is the type) or be blank to inherit the !user.template permission
 * @param	password		the password for the new user
 * @return		        	success or exception message
 * @throws	AxisFault
 * 
 * This form of addUser() should only be used when you need control over the user's internal ID. Otherwise use the other form.
 * 
 */
public String addNewUser( String sessionid, String id ,String eid, String firstname, String lastname, String email, String type, String password) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	if (!SecurityService.isSuperUser())
	{
		LOG.warn("NonSuperUser trying to add accounts: " + session.getUserId());
        throw new AxisFault("NonSuperUser trying to add accounts: " + session.getUserId());
	}
	try {

		User addeduser = null;
		addeduser = UserDirectoryService.addUser(id, eid, firstname, lastname, email, password, type, null);
	
	}
	catch (Exception e) {  
		LOG.warn("WS addNewUser(): " + e.getClass().getName() + " : " + e.getMessage());
        return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Remove a user account
 *
 * @param	sessionid		the id of a valid session
 * @param	eid				the login username (ie jsmith26) of the user whose account you want to remove
 * @return		        	success or exception message
 * @throws	AxisFault
 *
 */
public String removeUser( String sessionid, String eid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		UserEdit userEdit = null;
		String userid = UserDirectoryService.getUserByEid(eid).getId();
		userEdit = UserDirectoryService.editUser(userid);
		UserDirectoryService.removeUser(userEdit);
	
	}
	catch (Exception e) {  
		LOG.error("WS removeUser(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Edit a user's account details
 *
 * @param	sessionid		the id of a valid session
 * @param	eid				the login username (ie jsmith26) of the user you want to edit
 * @param	firstname		the updated firstname for the user
 * @param	lastname		the updated last name for the user
 * @param	email			the updated email address for the user
 * @param	type			the updated user type
 * @param	password		the updated password for the user
 * @return		        	success or exception message
 * @throws	AxisFault
 *
 * Note that if you only want to change individual properties of a user's account like their email address or password, see the related web services.
 *
 */
public String changeUserInfo( String sessionid, String eid, String firstname, String lastname, String email, String type, String password) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		UserEdit userEdit = null;
		String userid = UserDirectoryService.getUserByEid(eid).getId();
		userEdit = UserDirectoryService.editUser(userid);
		userEdit.setFirstName(firstname);
		userEdit.setLastName(lastname);
		userEdit.setEmail(email);
		userEdit.setType(type);
		userEdit.setPassword(password);
		UserDirectoryService.commitEdit(userEdit);
	
	}
	catch (Exception e) { 
		LOG.error("WS removeUser(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Edit a user's firstname/lastname
 *
 * @param	sessionid		the id of a valid session
 * @param	eid				the login username (ie jsmith26) of the user you want to edit
 * @param	firstname		the updated firstname for the user
 * @param	lastname		the updated last name for the user
 * @return		        	success or exception message
 * @throws	AxisFault
 *
 */
public String changeUserName( String sessionid, String eid, String firstname, String lastname) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		UserEdit userEdit = null;
		String userid = UserDirectoryService.getUserByEid(eid).getId();
		userEdit = UserDirectoryService.editUser(userid);
		userEdit.setFirstName(firstname);
		userEdit.setLastName(lastname);
		UserDirectoryService.commitEdit(userEdit);
	}
	catch (Exception e) { 
		LOG.error("WS changeUserName(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Edit a user's email address
 *
 * @param	sessionid		the id of a valid session
 * @param	eid				the login username (ie jsmith26) of the user you want to edit
 * @param	email			the updated email address for the user
 * @return		        	success or exception message
 * @throws	AxisFault
 *
 */
public String changeUserEmail( String sessionid, String eid, String email) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		UserEdit userEdit = null;
		String userid = UserDirectoryService.getUserByEid(eid).getId();
		userEdit = UserDirectoryService.editUser(userid);
		userEdit.setEmail(email);
		UserDirectoryService.commitEdit(userEdit);
	
	}
	catch (Exception e) { 
		LOG.error("WS changeUserEmail(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Edit a user's user type
 *
 * @param	sessionid		the id of a valid session
 * @param	eid				the login username (ie jsmith26) of the user you want to edit
 * @param	type			the updated user type. See addNewUser() for an explanation of what this field means
 * @return		        	success or exception message
 * @throws	AxisFault
 *
 */
public String changeUserType( String sessionid, String eid, String type) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {
		UserEdit userEdit = null;
		String userid = UserDirectoryService.getUserByEid(eid).getId();
		userEdit = UserDirectoryService.editUser(userid);
		userEdit.setType(type);
		UserDirectoryService.commitEdit(userEdit);
	
	}
	catch (Exception e) { 
		LOG.error("WS changeUserType(): " + e.getClass().getName() + " : " + e.getMessage());
		return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Edit a user's password
 *
 * @param	sessionid		the id of a valid session
 * @param	eid				the login username (ie jsmith26) of the user you want to edit
 * @param	password		the password for the user
 * @return		        	success or exception message
 * @throws	AxisFault
 *
 */
public String changeUserPassword( String sessionid, String eid, String password) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		UserEdit userEdit = null;
		String userid = UserDirectoryService.getUserByEid(eid).getId();
		userEdit = UserDirectoryService.editUser(userid);
		userEdit.setPassword(password);
		UserDirectoryService.commitEdit(userEdit);
	
	}
	catch (Exception e) {
		LOG.error("WS changeUserPassword(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Get a user's email address based on their session id
 *
 * @param	sessionid		the session id of the user who's email address you wish to retrieve
 * @return		        	their email address
 * @throws	AxisFault
 *
 */
public String getUserEmail( String sessionid ) throws AxisFault
{
	Session session = establishSession(sessionid);
	User user = UserDirectoryService.getCurrentUser();
	return user.getEmail();
}

/**
 * Get a user's display name based on their session id
 *
 * @param	sessionid		the session id of the user who's display name you wish to retrieve
 * @return		        	success or exception message
 * @throws	AxisFault
 *
 */
public String getUserDisplayName( String sessionid ) throws AxisFault
{
	Session session = establishSession(sessionid);
	User user = UserDirectoryService.getCurrentUser();
	return user.getDisplayName();
}

//addNewRealm
public String addNewAuthzGroup(String sessionid, String groupid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = null;
		authzgroup = AuthzGroupService.addAuthzGroup(groupid);
		AuthzGroupService.save(authzgroup);
	
	}
	catch (Exception e) {  
	 return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

//removeRealm
public String removeAuthzGroup( String sessionid, String authzgroupid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		AuthzGroupService.removeAuthzGroup(authzgroup);
	
	}
	catch (Exception e) {  
		LOG.error("WS removeAuthzGroup(): " + e.getClass().getName() + " : " + e.getMessage());
		return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Add a role to an authzgroup (realm)
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	authzgroupid 	the id of the authzgroup to add the role to
 * @param 	roleid		 	the id of the role to add
 * @param 	description 	the description for the new role
 * @return					success or exception message
 *
 */
public String addNewRoleToAuthzGroup( String sessionid, String authzgroupid, String roleid, String description) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		Role role = authzgroup.addRole(roleid);
		role.setDescription(description);
		AuthzGroupService.save(authzgroup);
	
	}
	catch (Exception e) {  
		LOG.error("WS addNewRoleToAuthzGroup(): " + e.getClass().getName() + " : " + e.getMessage());
		return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Remove all roles that exist in an authzgroup (realm)
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	authzgroupid 	the id of the authzgroup to remove the roles from
 * @return					success or exception message
 *
 */
 public String removeAllRolesFromAuthzGroup( String sessionid, String authzgroupid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		authzgroup.removeRoles();
		AuthzGroupService.save(authzgroup);
	
	}
	catch (Exception e) {  
		LOG.error("WS removeAllRolesFromAuthzGroup(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Remove a role from an authzgroup (realm)
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	authzgroupid 	the id of the authzgroup to remove the role from
 * @param 	roleid		 	the id of the role to remove
 * @return					success or exception message
 *
 */
public String removeRoleFromAuthzGroup( String sessionid, String authzgroupid, String roleid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		authzgroup.removeRole(roleid);
		AuthzGroupService.save(authzgroup);
	
	}
	catch (Exception e) {  
		LOG.error("WS removeRoleFromAuthzGroup(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Add a function to a role in an authzgroup (realm)
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	authzgroupid 	the id of the authzgroup that the role is in
 * @param 	roleid		 	the id of the role to add a function to
 * @param	functionname	the name of the new function eg content.new
 * @return					success or exception message
 *
 * TODO: fix for if the functionname doesn't exist, it is still returning success - SAK-15334
 */
public String allowFunctionForRole( String sessionid, String authzgroupid, String roleid, String functionname) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		Role role = authzgroup.getRole(roleid);
		role.allowFunction(functionname);
		AuthzGroupService.save(authzgroup);
	
	}
	catch (Exception e) {  
		LOG.error("WS allowFunctionForRole(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Remove all functions from a role in an authzgroup (realm)
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	authzgroupid 	the id of the authzgroup that the role is in
 * @param 	roleid		 	the id of the role to remove the functions from
 * @return					success or exception message
 *
 */
public String disallowAllFunctionsForRole( String sessionid, String authzgroupid, String roleid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		Role role = authzgroup.getRole(roleid);
		role.disallowAll();
		AuthzGroupService.save(authzgroup);
	
	}
	catch (Exception e) {  
		LOG.error("WS disallowAllFunctionsForRole(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Remove a function from a role in an authzgroup (realm)
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	authzgroupid 	the id of the authzgroup that the role is in
 * @param 	roleid		 	the id of the role to remove the function from
 * @param	functionname	the name of the function to remove
 * @return					success or exception message
 *
 * TODO: fix for if the functionname doesn't exist, it is still returning success - SAK-15334
 */
public String disallowFunctionForRole( String sessionid, String authzgroupid, String roleid, String functionname) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		Role role = authzgroup.getRole(roleid);
		role.disallowFunction(functionname);
		AuthzGroupService.save(authzgroup);
	
	}
	catch (Exception e) {  
		LOG.error("WS disallowFunctionForRole(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Edit a role's description
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	authzgroupid 	the id of the authzgroup that the role exists in
 * @param 	roleid		 	the id of the role to edit
 * @param 	description 	the updated description for the role
 * @return					success or exception message
 *
 */
public String setRoleDescription( String sessionid, String authzgroupid, String roleid, String description) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		Role role = authzgroup.getRole(roleid);
		role.setDescription(description);
		AuthzGroupService.save(authzgroup);
	
	}
	catch (Exception e) {  
		LOG.error("WS setRoleDescription(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Add a user to an authgroup with the given role
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	eid	 			the login username (ie jsmith26) of the user you want to add
 * @param 	authzgroupid 	the id of the authzgroup to add the user to
 * @param 	roleid		 	the id of the role to add the user to in the authzgroup
 * @return					success or exception message
 *
 */
public String addMemberToAuthzGroupWithRole( String sessionid, String eid, String authzgroupid, String roleid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		String userid = UserDirectoryService.getUserByEid(eid).getId();
		authzgroup.addMember(userid,roleid,true,false);
		AuthzGroupService.save(authzgroup);
	
	}
	catch (Exception e) {  
		LOG.error("WS addMemberToAuthzGroupWithRole(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Remove a user from an authgroup
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	eid	 			the login username (ie jsmith26) of the user you want to remove
 * @param 	authzgroupid 	the id of the authzgroup to remove the user from
 * @return					success or exception message
 *
 */
 public String removeMemberFromAuthzGroup( String sessionid, String eid, String authzgroupid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		String userid = UserDirectoryService.getUserByEid(eid).getId();
		authzgroup.removeMember(userid);
		AuthzGroupService.save(authzgroup);
	
	}
	catch (Exception e) {  
		LOG.error("WS removeMemberFromAuthzGroup(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Remove all users from an authgroup
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	authzgroupid 	the id of the authzgroup to remove the users from
 * @return					success or exception message
 *
 */
 public String removeAllMembersFromAuthzGroup( String sessionid, String authzgroupid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup realmEdit = AuthzGroupService.getAuthzGroup(authzgroupid);
		realmEdit.removeMembers();
		AuthzGroupService.save(realmEdit);
	
	}
	catch (Exception e) {  
		LOG.error("WS removeAllMembersFromAuthzGroup(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Set the role that allows maintenance on the given authgroup
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	authzgroupid 	the id of the authzgroup to edit
 * @param 	roleid		 	the id of the role to to set
 * @return					success or exception message
 *
 * TODO: fix for if the role doesn't exist in the authzgroup, it is still returning success - SAK-15334
 */
 public String setRoleForAuthzGroupMaintenance( String sessionid, String authzgroupid, String roleid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		AuthzGroup authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		authzgroup.setMaintainRole(roleid);
		AuthzGroupService.save(authzgroup);
	
	}
	catch (Exception e) {  
		LOG.error("WS setRoleForAuthzGroupMaintenance(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Add a user to a site with a given role
 *
 * @param 	sessionid 	the id of a valid session
 * @param 	siteid 		the id of the site to add the user to
 * @param 	eid		 	the login username (ie jsmith26) of the user you want to add to the site
 * @param 	roleid		the id of the role to to give the user in the site
 * @return				success or exception message
 *
 * TODO: fix for if the role doesn't exist in the site, it is still returning success - SAK-15334
 */
public String addMemberToSiteWithRole(String sessionid, String siteid, String eid, String roleid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {
		Site site = SiteService.getSite(siteid);
		String userid = UserDirectoryService.getUserByEid(eid).getId();
		site.addMember(userid,roleid,true,false);
		SiteService.save(site);
	}
	catch (Exception e) {  
		LOG.error("WS addMemberToSiteWithRole(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Create a new site
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	siteid 			the id of the new site (ie test123)
 * @param 	title 			the title of the new site
 * @param 	description 	the full description for the new site
 * @param 	shortdesc 		the short description for the new site
 * @param 	iconurl 		the url to an icon for the site (on the default skin should not be more than 100px wide)
 * @param 	infourl 		the url to a page of information about the site (this is added to the Site Information portlet)
 * @param 	joinable 		should this site be joinable?
 * @param 	joinerrole 		if joinable, the role to assign users that join this site
 * @param 	published 		should this site be made available to participants of the site now? 
 * @param 	publicview 		should this site be shown on the public list of sites?
 * @param 	skin 			the id of the skin for this site, from the list in /library/skin/SKIN
 * @param 	type 			the type of site ie project, course, etc, or any type defined as !site.template.TYPE. If blank will inherit !site.template roles/permissions
 * @return					success or exception message
 *
 * Note that this will create an empty site with no tools. If you would like to create a site from a template, ie inherit its tool structure (not content), see copySite()
 *
 */
public String addNewSite( String sessionid, String siteid, String title, String description, String shortdesc, String iconurl, String infourl, boolean joinable, String joinerrole, boolean published, boolean publicview, String skin, String type) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		Site siteEdit = null;
		siteEdit = SiteService.addSite(siteid, type);
		siteEdit.setTitle(title);
		siteEdit.setDescription(description);
		siteEdit.setShortDescription(shortdesc);
		siteEdit.setIconUrl(iconurl);
		siteEdit.setInfoUrl(infourl);
		siteEdit.setJoinable(joinable);
		siteEdit.setJoinerRole(joinerrole);
		siteEdit.setPublished(published);
		siteEdit.setPubView(publicview);
		siteEdit.setSkin(skin);
		siteEdit.setType(type);
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
		LOG.error("WS addNewSite(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Remove a site
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	siteid 			the id of the site to remove
 * @return					success or exception message
 *
 */
public String removeSite( String sessionid, String siteid) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		Site siteEdit = null;
		siteEdit = SiteService.getSite(siteid);
		SiteService.removeSite(siteEdit);
	
	}
	catch (Exception e) {  
		LOG.error("WS removeSite(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Create a new site based on another site. This will copy its tool structure, but not its content
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	siteidtocopy	the id of the site to base this new site on
 * @param 	siteid 			the id of the new site (ie test123)
 * @param 	title 			the title of the new site
 * @param 	description 	the full description for the new site
 * @param 	shortdesc 		the short description for the new site
 * @param 	iconurl 		the url to an icon for the site (on the default skin should not be more than 100px wide)
 * @param 	infourl 		the url to a page of information about the site (this is added to the Site Information portlet)
 * @param 	joinable 		should this site be joinable?
 * @param 	joinerrole 		if joinable, the role to assign users that join this site
 * @param 	published 		should this site be made available to participants of the site now? 
 * @param 	publicview 		should this site be shown on the public list of sites?
 * @param 	skin 			the id of the skin for this site, from the list in /library/skin/SKIN
 * @param 	type 			the type of site ie project, course, etc, or any type defined as !site.template.TYPE. If blank will inherit !site.template roles/permissions
 * @return					success or exception message
 *
 */
public String copySite( String sessionid, String siteidtocopy, String newsiteid, String title, String description, String shortdesc, String iconurl, String infourl, boolean joinable, String joinerrole, boolean published, boolean publicview, String skin, String type) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		Site site = SiteService.getSite(siteidtocopy);
		Site siteEdit = SiteService.addSite(newsiteid, site);
		siteEdit.setTitle(title);
		siteEdit.setDescription(description);
		siteEdit.setShortDescription(shortdesc);
		siteEdit.setIconUrl(iconurl);
		siteEdit.setInfoUrl(infourl);
		siteEdit.setJoinable(joinable);
		siteEdit.setJoinerRole(joinerrole);
		siteEdit.setPublished(published);
		siteEdit.setPubView(publicview);
		siteEdit.setSkin(skin);
		siteEdit.setType(type);
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
		LOG.error("WS copySite(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Create a new page in a site. A page holds one or more tools and is shown in the main navigation section. You will still need to add tools to this page.
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	siteid 			the id of the site to add the page to
 * @param 	pagetitle 		the title of the new page
 * @param 	pagelayout 		single or double column (0 or 1). Any other value will revert to 0.
 * @return					success or exception message
 *
 */
public String addNewPageToSite( String sessionid, String siteid, String pagetitle, int pagelayout) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		Site siteEdit = null;
		SitePage sitePageEdit = null;
		siteEdit = SiteService.getSite(siteid);
		sitePageEdit = siteEdit.addPage();
		sitePageEdit.setTitle(pagetitle);
		sitePageEdit.setLayout(pagelayout);
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
		LOG.error("WS addNewPageToSite(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Remove a page from a site
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	siteid 			the id of the site to remove the page from
 * @param 	pagetitle 		the title of the page to remove
 * @return					success or exception message
 *
 * TODO: fix for if the page title is blank it removes nothing and is still returning success - SAK-15334
 * TODO: fix for ConcurrentModficationException being thrown - SAK-15337. Is this because it removes via pagetitle but can allow multiple page titles of the same name?
 */
public String removePageFromSite( String sessionid, String siteid, String pagetitle) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		Site siteEdit = null;
		siteEdit = SiteService.getSite(siteid);
		List pageEdits = siteEdit.getPages();
		for (Iterator i = pageEdits.iterator(); i.hasNext();)
		{
			SitePage pageEdit = (SitePage) i.next();
			if (pageEdit.getTitle().equals(pagetitle))
				siteEdit.removePage(pageEdit);
		}
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
		LOG.error("WS removePageFromSite(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}


/**
 * Add a new tool to a page in a site
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	siteid 			the id of the site to add the page to
 * @param 	pagetitle 		the title of the page to add the tool to
 * @param 	tooltitle 		the title of the new tool (ie Resources)
 * @param 	toolid 			the id of the new tool (ie sakai.resources)
 * @param 	layouthints 	where on the page this tool should be added, in 'row, col' and 0 based, ie first column, first tool='0,0'; Second column third tool = '1,2'
 * @return					success or exception message
 *
 * TODO: fix for if any values (except sessionid and siteid) are blank or invalid, it is still returning success - SAK-15334
 */
public String addNewToolToPage( String sessionid, String siteid, String pagetitle, String tooltitle, String toolid, String layouthints) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		Site siteEdit = SiteService.getSite(siteid);
		List pageEdits = siteEdit.getPages();
		for (Iterator i = pageEdits.iterator(); i.hasNext();)
		{
			SitePage pageEdit = (SitePage) i.next();
			if (pageEdit.getTitle().equals(pagetitle))
			{
				ToolConfiguration tool = pageEdit.addTool();
				Tool t = tool.getTool();
				
				tool.setTool(toolid, ToolManager.getTool(toolid));
				tool.setTitle(tooltitle);
				//toolEdit.setTitle(tooltitle);
				//toolEdit.setToolId(toolid);
				//tool.setLayoutHints(layouthints);
			}
		}
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
		LOG.error("WS addNewToolToPage(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}


/**
 * Add a property to a tool on a page in a site
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	siteid 			the id of the site to add the page to
 * @param 	pagetitle 		the title of the page the tool exists in
 * @param 	tooltitle 		the title of the tool to add the property to
 * @param 	propname 		the name of the property
 * @param 	propvalue 		the value of the property
 * @return					success or exception message
 *
 * TODO: fix for if any values (except sessionid and siteid) are blank or invalid, it is still returning success - SAK-15334
 */
public String addConfigPropertyToTool( String sessionid, String siteid, String pagetitle, String tooltitle, String propname, String propvalue) throws AxisFault
{
	Session session = establishSession(sessionid);
	
	try {

		Site siteEdit = SiteService.getSite(siteid);
		List pageEdits = siteEdit.getPages();
		for (Iterator i = pageEdits.iterator(); i.hasNext();)
		{
			SitePage pageEdit = (SitePage) i.next();
			if (pageEdit.getTitle().equals(pagetitle))
			{
				List toolEdits = pageEdit.getTools();
				for (Iterator j = toolEdits.iterator(); j.hasNext();)
				{
					ToolConfiguration tool = (ToolConfiguration) j.next();
					Tool t = tool.getTool();
					if (tool.getTitle().equals(tooltitle))
					{
						Properties propsedit = tool.getPlacementConfig();
						propsedit.setProperty(propname, propvalue);
					}
				}
			}
		}
		SiteService.save(siteEdit);
	
	}
	catch (Exception e) {  
		LOG.error("WS addConfigPropertyToTool(): " + e.getClass().getName() + " : " + e.getMessage());
	 	return e.getClass().getName() + " : " + e.getMessage();
	}
	return "success";
}

/**
 * Check if a user exists (either as an account in Sakai or in any external provider)
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	eid 			the login username (ie jsmith26) of the user to check for
 * @return					true/false
 *
 */
public boolean checkForUser(String sessionid, String eid) throws AxisFault
{
	Session s = establishSession(sessionid);
	
	try {
		User u = null;
		String userid = UserDirectoryService.getUserByEid(eid).getId();
		u = UserDirectoryService.getUser(userid);
		if (u != null) {
			return true;
		} else {
			return false;
		}
	}
	catch (Exception e) {
		LOG.error("WS checkForUser(): " + e.getClass().getName() + " : " + e.getMessage());
		return false;
	}
}

/**
 * Check if a site exists
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	siteid 			the id of the site to check for
 * @return					true/false
 *
 */
 public boolean checkForSite(String sessionid, String siteid) throws AxisFault
{
	Session s = establishSession(sessionid);
	
	try {
		Site site = null;
		site = SiteService.getSite(siteid);
		if (site != null) {
			return true;
		} else {
			return false;
		}
	}
	catch (Exception e) {
		LOG.error("WS checkForSite(): " + e.getClass().getName() + " : " + e.getMessage());
		return false;
	}
}

/**
 * Check if a user exists in the authzgroup (or site) with the given role
 *
 * @param 	sessionid 		the id of a valid session
 * @param 	eid 			the login username (ie jsmith26) of the user to check for
 * @param 	authzgroupid 	the id of the authzgroup to check in. If this is a site it should be of the form /site/SITEID
 * @param 	role 			the id of the role for the user in the site
 * @return					true/false
 *
 */
public boolean checkForMemberInAuthzGroupWithRole(String sessionid, String eid, String authzgroupid, String role) throws AxisFault
{
	Session s = establishSession(sessionid);
	
	try {
		AuthzGroup authzgroup = null; 
		authzgroup = AuthzGroupService.getAuthzGroup(authzgroupid);
		if (authzgroup == null) {
			return false;
		} else {
			String userid = UserDirectoryService.getUserByEid(eid).getId();
			return authzgroup.hasRole(userid, role);
		}
	}
	catch (Exception e) {
		LOG.error("WS checkForMemberInAuthzGroupWithRole(): " + e.getClass().getName() + " : " + e.getMessage());
		return false;
	}
}

/**
 * Return XML document listing all sites user has read or write access based on their session id.
 *
 * @param 	sessionid 		the session id of a user who's list of sites you want to retrieve
 * @param 	eid 			the login username (ie jsmith26) of the user to check for
 * @param 	authzgroupid 	the id of the authzgroup to check in. If this is a site it should be of the form /site/SITEID
 * @param 	role 			the id of the role for the user in the site
 * @return					xml or an empty list <list/>. The return XML format is below:
 *<list>
 *	<item>
 *		<siteId>!admin</siteId>
 *		<siteTitle>Administration Workspace</siteTitle>
 *	</item>
 *	<item>
 *		...
 *	</item>
 *	...
 *</list>
 *
 */
public String getSitesUserCanAccess(String sessionid) throws AxisFault
{
	Session s = establishSession(sessionid);
	
	try 
	{
		List allSites = SiteService.getSites(SelectionType.ACCESS, null, null,
														  null, SortType.TITLE_ASC, null);
		List moreSites = SiteService.getSites(SelectionType.UPDATE, null, null,
															null, SortType.TITLE_ASC, null);
		
		if ((allSites == null || moreSites == null) || (allSites.size() == 0 && moreSites.size() == 0)) {
			return "<list/>";
		}

		// Remove duplicates and combine two lists
		allSites.removeAll( moreSites );
		allSites.addAll( moreSites );
		
		Document dom = Xml.createDocument();
		Node list = dom.createElement("list");
		dom.appendChild(list);
		
		for (Iterator i = allSites.iterator(); i.hasNext();)
		{
		   Site site = (Site)i.next();
			Node item = dom.createElement("item");
			Node siteId = dom.createElement("siteId");
			siteId.appendChild( dom.createTextNode(site.getId()) );
			Node siteTitle = dom.createElement("siteTitle");
			siteTitle.appendChild( dom.createTextNode(site.getTitle()) );
			
			item.appendChild(siteId);
			item.appendChild(siteTitle);
			list.appendChild(item);
		}
		
		return Xml.writeDocumentToString(dom);
	}
	catch (Exception e) 
	{
		LOG.error("WS getSitesUserCanAccess(): " + e.getClass().getName() + " : " + e.getMessage());
		return "<exception/>";
	}
}



}